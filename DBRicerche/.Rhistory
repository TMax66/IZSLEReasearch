install.packages("DT")
shiny::runApp()
install.packages("shinydashboard")
runApp('C:/Users/massi/OneDrive/Desktop/DBRicerche')
install.packages(c("tidyverse", "googlesheets", "readxl"))
install.packages(c("ldatuning", "wordcloud2"))
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
plot(tdm, term=freq.term, corThreshold = 0.1,weighting=T)
attrs <- list(node=list(shape="ellipse", fixedsize=FALSE))
plot(tdm, term=freq.term, corThreshold = 0.1,weighting=T, attrs=attrs)
runApp()
plot(tdm, term=freq.term, corThreshold = 0.2,weighting=T, attrs=attrs, "twopi")
plot(tdm, term=freq.term, corThreshold = 0.1,weighting=T, attrs=attrs, "twopi")
plot(tdm, term=freq.term, corThreshold = 0.1,weighting=T, attrs=attrs, "neato")
plot(tdm, term=freq.term, corThreshold = 0.1,weighting=T, "neato")
plot(tdm, term=freq.term, corThreshold = 0.1,weighting=T, "neato")
plot(tdm, term=freq.term, corThreshold = 0.1,weighting=T, attrs=attrs, "neato")
plot(tdm, term=freq.term, corThreshold = 0.1,weighting=T, "neato")
plot(tdm, term=freq.term, corThreshold = 0.1,weighting=T, attrs=attrs, "dot")
plot(tdm, term=freq.term, corThreshold = 0.1,weighting=T, "dot")
plot(tdm, term=freq.term, corThreshold = 0.1,weighting=T, attrs=attrs, "dot")
par(cex=0.05)
plot(tdm, term=freq.term, corThreshold = 0.1,weighting=T, attrs=attrs, "dot")
par(cex=1)
plot(tdm, term=freq.term, corThreshold = 0.1,weighting=T, attrs=attrs, "dot")
par(cex=1.5)
plot(tdm, term=freq.term, corThreshold = 0.1,weighting=T, attrs=attrs, "dot")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#adjacency matrix
tdm.title.m[tdm.title.m>=1] <- 1
tdm2[5:10,5:10]
tdm2<-tdm.title.m%*%t(tdm.title.m)
tdm2[5:10,5:10]
tdm.g <- graph.adjacency(tdm2, weighted=TRUE, mode="undirected")
install.packages("igraphdata")
library(igraph)
tdm.g <- graph.adjacency(tdm2, weighted=TRUE, mode="undirected")
install.packages("igraph")
library(igraph)
tdm.g <- graph.adjacency(tdm2, weighted=TRUE, mode="undirected")
tdm.g<-simplify(tdm.g)
V(tdm.g)$label <- V(tdm.g)$name
V(tdm.g)$degree <- degree(tdm.g)
layout1 <- layout.fruchterman.reingold(tdm.g)
plot(tdm.g, layout=layout1, vertex.size=20,
vertex.label.color="darkred")
plot(tdm.g, layout=layout1, vertex.size=5,
vertex.label.color="darkred")
tdm2<-removeSparseTerms(tdm, sparse=0.975)
hc<-hclust(dist(tdm2, method = "euclidean"), method="complete")
plot(hc, yaxt="n",main="", hang=0.5, cex=0.6)
rect.hclust(hc,k=6)
dend.change<-function(n){
if(is.leaf(n))
{
a<-attributes(n)
labCol<-labelColors[clusMember[which(
names(clusMember)==a$label)]]
attr(n, "nodePar") <-c(a$nodePar, lab.col=labCol)
}
n
}
hcd<-as.dendrogram(hc)
clusMember<-cutree(hc, 6)
labelColors<-c('darkgrey', 'darkred', 'black', '#bada55', "lightblue", "red")
clusDendro<-dendrapply(hcd, dend.change)
plot(clusDendro, main='title', type='triangle', yaxt='n')
hcd<-color_labels(hcd, 4, col=c('#bada55', 'darkgrey', 'darkred', 'black'))
hcd<-color_branches(hcd, 4, col=c('#bada55', 'darkgrey', 'darkred', 'black'))
circlize_dendrogram(hcd, labels_track_height = 0.5, dend_track_height = 0.4)
install.packages("dendextend")
library(dendextend)
circlize_dendrogram(hcd, labels_track_height = 0.5, dend_track_height = 0.4)
hcd<-as.dendrogram(hc)
clusMember<-cutree(hc, 6)
labelColors<-c('darkgrey', 'darkred', 'black', '#bada55', "lightblue", "red")
clusDendro<-dendrapply(hcd, dend.change)
plot(clusDendro, main='title', type='triangle', yaxt='n')
hcd<-color_labels(hcd, 4, col=c('#bada55', 'darkgrey', 'darkred', 'black'))
hcd<-color_branches(hcd, 4, col=c('#bada55', 'darkgrey', 'darkred', 'black'))
circlize_dendrogram(hcd, labels_track_height = 0.5, dend_track_height = 0.4)
install.packages("circlize")
library(circlize)
circlize_dendrogram(hcd, labels_track_height = 0.5, dend_track_height = 0.4)
tdm2<-removeSparseTerms(tdm, sparse=0.975)
hc<-hclust(dist(tdm2, method = "euclidean"), method="complete")
hcd<-as.dendrogram(hc)
hcd<-color_labels(hcd, 4, col=c('#bada55', 'darkgrey', 'darkred', 'black'))
hcd<-color_branches(hcd, 4, col=c('#bada55', 'darkgrey', 'darkred', 'black'))
circlize_dendrogram(hcd, labels_track_height = 0.5, dend_track_height = 0.4)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
bsExample("Modals")
bsDemo()
bsDemo()
example("Modals", "shinyBS", ask = FALSE)
(
ui =
fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
actionButton("tabBut", "View Table")
),
mainPanel(
plotOutput("distPlot"),
bsModal("modalExample", "Data Table", "tabBut", size = "large",
dataTableOutput("distTable"))
)
)
),
server =
function(input, output, session) {
output$distPlot <- renderPlot({
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
output$distTable <- renderDataTable({
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
tab <- hist(x, breaks = bins, plot = FALSE)
tab$breaks <- sapply(seq(length(tab$breaks) - 1), function(i) {
paste0(signif(tab$breaks[i], 3), "-", signif(tab$breaks[i+1], 3))
})
tab <- as.data.frame(do.call(cbind, tab))
colnames(tab) <- c("Bins", "Counts", "Density")
return(tab[, 1:3])
}, options = list(pageLength=10))
}
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinyBS)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard"))
)
),
## Body content
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "dashboard",
actionButton("showTable", "Show Table", icon = icon("table")),
bsModal("modalExample", "Data Table", "showTable", size = "large",
dataTableOutput("tbl"))
)
)
)
)
server <- function(input, output) {
output$tbl = renderDataTable( iris, options = list(lengthChange = FALSE))
}
shinyApp(ui, server)
runApp()
runApp()
library("shiny")
library("shinydashboard")
library("datasets")
library("DT")
library("shinyBS")
header <- dashboardHeader()
sidebar <- dashboardSidebar()
body <- dashboardBody(
DT::dataTableOutput("mtcarsTable"),
bsModal("mtCarsModal", "My Modal", "",tags$p("Hello World"), size = "small")
)
shinyApp(
ui = dashboardPage(header, sidebar, body),
server = function(input, output, session) {
mtcarsLinked <- reactive({
mtcars$mpg <- sapply(datasets::mtcars$mpg, function(x) {as.character(tags$a(href = "#", onclick = "$('#mtCarsModal').modal('show')", x))})
return(mtcars)
})
output$mtcarsTable <- DT::renderDataTable({
DT::datatable(mtcarsLinked(),
class = 'compact',
escape = FALSE
)
})
}
)
dtm<-DocumentTermMatrix(corpus)
View(dtm)
View(tdm)
dtm2<-removeSparseTerms(dtm, sparse=0.975)
hc<-hclust(dist(dtm2, method = "euclidean"), method="complete")
hcd<-as.dendrogram(hc)
hcd<-color_labels(hcd, 4, col=c('#bada55', 'darkgrey', 'darkred', 'black'))
hcd<-color_branches(hcd, 4, col=c('#bada55', 'darkgrey', 'darkred', 'black'))
circlize_dendrogram(hcd, labels_track_height = 0.5, dend_track_height = 0.4)
tdm2<-removeSparseTerms(tdm, sparse=0.15)
#dtm2<-removeSparseTerms(dtm, sparse=0.975)
hc<-hclust(dist(dtm2, method = "euclidean"), method="complete")
hcd<-as.dendrogram(hc)
hcd<-color_labels(hcd, 4, col=c('#bada55', 'darkgrey', 'darkred', 'black'))
hcd<-color_branches(hcd, 4, col=c('#bada55', 'darkgrey', 'darkred', 'black'))
circlize_dendrogram(hcd, labels_track_height = 0.5, dend_track_height = 0.4)
tdm2<-removeSparseTerms(tdm, sparse=0.15)
#dtm2<-removeSparseTerms(dtm, sparse=0.975)
hc<-hclust(dist(tdm2, method = "euclidean"), method="complete")
tdm2<-removeSparseTerms(tdm, sparse=0.15)
#dtm2<-removeSparseTerms(dtm, sparse=0.975)
hc<-hclust(dist(tdm2, method = "euclidean"), method="complete")
tdm2<-removeSparseTerms(tdm, sparse=0.975)
hc<-hclust(dist(tdm2, method = "euclidean"), method="complete")
hcd<-as.dendrogram(hc)
hcd<-color_labels(hcd, 4, col=c('#bada55', 'darkgrey', 'darkred', 'black'))
hcd<-color_branches(hcd, 4, col=c('#bada55', 'darkgrey', 'darkred', 'black'))
circlize_dendrogram(hcd, labels_track_height = 0.5, dend_track_height = 0.4)
commonality.cloud(m,
colors = "steelblue1",
max.words = 100)
library(wordcloud)
install.packages("wordcloud")
library(wordcloud)
commonality.cloud(m,
colors = "steelblue1",
max.words = 100)
m
library(shiny)
library(shinydashboard)
library (DT)
library(tidyverse)
library(googlesheets)
library(readxl)
library(topicmodels)
library(tidytext)
library(tm)
library(ggthemes)
library(ggpubr)
library(ldatuning)
library(wordcloud2)
library(igraph)
library(dendextend)
library(circlize)
library(shinyBS)
library(wordcloud)
ds <- read_excel("prizsler.xlsx")
ds2<-ds %>%
filter(Tipologia=="Corrente")
tryTolower<-function(x){
y=NA
try_error=tryCatch(tolower(x), error=function(e) e)
if(!inherits(try_error, 'error'))
y=tolower(x)
return(y)
}
clean.corpus<-function(corpus){
corpus<-tm_map(corpus, content_transformer(tryTolower))
corpus<-tm_map(corpus, removeWords, custom.stopwords)
corpus<-tm_map(corpus, removePunctuation)
corpus<-tm_map(corpus, stripWhitespace)
corpus<-tm_map(corpus,removeNumbers)
return(corpus)
}
title<-data.frame(doc_id=seq(1:nrow(ds2)),text=ds2$Titolo)
custom.stopwords<-c(stopwords('italian'),"valutazione", "studio","animali", "animale","punto",
"messa","progetto","ricerca", "finanziamento", "specie", "test", "riferimento",
"particolare", "spp", "agenti", "mediante", "ceppi", "utilizzo", "protocolli",
"analisi", "sistema", "applicazione","origine", "indagine", "malattie", "malattia", "prova",
"strategie", "fattori","potenziale", "campo", "campioni", "presenza", "procedure")
corpus <- VCorpus(DataframeSource(title))
corpus<-clean.corpus(corpus)
corpus<-tm_map(corpus, content_transformer(gsub), pattern = "prodotti", replacement = "produzione")
corpus<-tm_map(corpus, content_transformer(gsub), pattern = "metodiche", replacement = "metodi")
corpus<-tm_map(corpus, content_transformer(gsub), pattern = "metodo", replacement = "metodi")
corpus<-tm_map(corpus, content_transformer(gsub), pattern = "metodica", replacement = "metodi")
corpus<-tm_map(corpus, content_transformer(gsub), pattern = "suini", replacement = "suino")
corpus<-tm_map(corpus, content_transformer(gsub), pattern = "suina", replacement = "suino")
corpus<-tm_map(corpus, content_transformer(gsub), pattern = "diagnostici", replacement = "diagnosi")
corpus<-tm_map(corpus, content_transformer(gsub), pattern = "allevamenti", replacement = "allevamento")
corpus<-tm_map(corpus, content_transformer(gsub), pattern = "virali", replacement = "virus")
corpus<-tm_map(corpus, content_transformer(gsub), pattern = "epidemiologiche", replacement = "epidemiologia")
corpus<-tm_map(corpus, content_transformer(gsub), pattern = "epidemiologica", replacement = "epidemiologia")
corpus<-tm_map(corpus, content_transformer(gsub), pattern = "avium", replacement = "paratubercolosi")
corpus<-tm_map(corpus, content_transformer(gsub), pattern = "subsp", replacement = "paratubercolosi")
corpus<-tm_map(corpus, content_transformer(gsub), pattern = "virali", replacement = "virus")
corpus<-tm_map(corpus, content_transformer(gsub), pattern = "bovini", replacement = "bovina")
corpus<-tm_map(corpus, content_transformer(gsub), pattern = "infezioni", replacement = "infezione")
corpus<-tm_map(corpus, content_transformer(gsub), pattern = "paratubercolosis", replacement = "paratubercolosi")
corpus<-tm_map(corpus, content_transformer(gsub), pattern = "map", replacement = "paratubercolosi")
corpus<-tm_map(corpus, content_transformer(gsub), pattern = "italia", replacement = "nazionale")
tdm<-TermDocumentMatrix(corpus, control=list(weighting=weightTf))
tdm<-removeSparseTerms(tdm,  sparse=0.99)
tdm.title.m<-as.matrix(tdm)
term.freq<-rowSums(tdm.title.m)
freq.df<-data.frame(word=names(term.freq), frequency=term.freq)
freq.df<-freq.df[order(freq.df[,2], decreasing=T),]
freq.df$word<-factor(freq.df$word, levels=unique(as.character(freq.df$word)))
tdm2<-removeSparseTerms(tdm, sparse=0.98)
hc<-hclust(dist(tdm2, method = "euclidean"), method="complete")
hcd<-as.dendrogram(hc)
clusMember<-cutree(hc, 6)
labelColors<-c('darkgrey', 'darkred', 'black', '#bada55', "lightblue", "red")
clusDendro<-dendrapply(hcd, dend.change)
dend.change<-function(n){
if(is.leaf(n))
{
a<-attributes(n)
labCol<-labelColors[clusMember[which(
names(clusMember)==a$label)]]
attr(n, "nodePar") <-c(a$nodePar, lab.col=labCol)
}
n
}
clusDendro<-dendrapply(hcd, dend.change)
plot(clusDendro, main='title', type='triangle', yaxt='n')
tdm2<-removeSparseTerms(tdm, sparse=0.99)
hc<-hclust(dist(tdm2, method = "euclidean"), method="complete")
hcd<-as.dendrogram(hc)
plot(hcd)
plot(hc)
plot(hc, yaxt="n",main="", hang=0.5, cex=0.6)
rect.hclust(hc,k=6)
hc<-hclust(dist(tdm2, method = "euclidean"), method="complete")
plot(hc, yaxt="n",main="", hang=0.8, cex=0.4)
tdm2<-removeSparseTerms(tdm, sparse=0.90)
hc<-hclust(dist(tdm2, method = "euclidean"), method="complete")
plot(hc, yaxt="n",main="", hang=0.8, cex=0.4)
plot(hc, yaxt="n",main="", hang=0.8, cex=0.8)
tdm2<-removeSparseTerms(tdm, sparse=0.95)
hc<-hclust(dist(tdm2, method = "euclidean"), method="complete")
plot(hc, yaxt="n",main="", hang=0.8, cex=0.8)
tdm2<-removeSparseTerms(tdm, sparse=0.96)
hc<-hclust(dist(tdm2, method = "euclidean"), method="complete")
plot(hc, yaxt="n",main="", hang=0.8, cex=0.8)
rect.hclust(hc,k=6)
tdm2<-removeSparseTerms(tdm, sparse=0.97)
hc<-hclust(dist(tdm2, method = "euclidean"), method="complete")
plot(hc, yaxt="n",main="", hang=0.8, cex=0.8)
rect.hclust(hc,k=6)
tdm2<-removeSparseTerms(tdm, sparse=0.98)
hc<-hclust(dist(tdm2, method = "euclidean"), method="complete")
plot(hc, yaxt="n",main="", hang=0.8, cex=0.8)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
associations<-findAssocs(tdm,'virus', 0.2)
associations<-as.data.frame(associations)
associations$terms<-row.names(associations)
associations$terms<-factor(associations$terms, levels = associations$terms)
associations<-findAssocs(tdm,'virus', 0.2)
associations<-as.data.frame(associations)
associations$terms<-row.names(associations)
associations$terms<-factor(associations$terms, levels = 0.2)
associations
associations<-findAssocs(tdm,'virus', 0.2)
associations
associations<-as.data.frame(associations)
associations
associations$terms<-row.names(associations)
associations
associations$terms<-factor(associations$terms, levels =associations$terms)
ggplot(associations, aes(y=terms))+
geom_point(aes(x=virus
), data=associations, size=1)+
theme_gdocs()+geom_text(aes(x=clean, label=clean),
colour="darkred", hjust=-.25, size=3)+
theme(text=element_text(size=8),
axis.title.y = element_blank())
ggplot(associations, aes(y=terms))+
geom_point(aes(x=virus
), data=associations, size=1)+
theme_gdocs()+geom_text(aes(x=virus, label=virus),
colour="darkred", hjust=-.25, size=3)+
theme(text=element_text(size=8),
axis.title.y = element_blank())
ggplot(associations, aes(y=terms))+
geom_point(aes(x=virus
), data=associations, size=1)+
theme_gdocs()+geom_text(aes(x=virus, label=virus),
colour="darkred", hjust=-.25, size=5)+
theme(text=element_text(size=8),
axis.title.y = element_blank())
runApp()
